---
title: "hw"
format: html
editor: visual
code-fold: true
code-summary: "Show Code"
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
options(repos = c(CRAN = "https://cran.rstudio.com/"))
install.packages("here")
library(tidyverse)
library(here)

```

This project has two raw data files at different scales from a study of infants, children, and adults watching a series of 7 video clips.

I wrote Steps 1 and 2 to import and merge the data and kept them here for reference.\

Skip down to Step 3 to work on EDA.

## **Source Description**

## **File 1: `auc.csv`**

Columns:

-   `stim`: Stimulus video (levels/labels provided below).

-   `id`: Unique participant identifier.

-   `age`: Age in days.

-   `AUC_sal`: Area-under-the-curve for a saliency model.

-   `AUC_dist`: Area-under-the-curve for a distance model.

AUC values indicate how well each model predicted where participants looked when watching a video.\

AUC values can range from **0-1**, where **0.5** is chance and **1** is perfect prediction.

### **File 2: `participants_info_full_headers.csv`**

Columns:

-   `id`: Unique participant identifier (matches `auc.csv`).

-   `age_group`: A categorical age variable with levels:

-   `.5-1 y`, `1-1.5 y`, `1.5-2 y`, `2-4 y`, `4-6 y`, `8-10 y`, `adult`.

-   `precision`: A quality measure of the eye data (smaller is better).

-   7 columns of `"Seen X"`: The stimulus video before the study, coded as:
    **1** = SEEN, **2** = NOT SEEN, **3** = NOT SURE.

## Step 1: Read in the AUC Data

### Code `stim` as a Factor

```{r}
auc <- read_csv("/Users/mayong/Desktop/auc_bystim.csv")

stim_levels <- 1:7
stim_labels <- c("Fallon","Feist","Pentatonix","Science","Rube","Plane","Dogs")

auc <- auc %>%
  mutate(stim = factor(stim, levels = stim_levels, labels = stim_labels))

```

## **Step 2: Read in the Participant Info Data**

Wrangle the participant info data so that it can be merged into the AUC data.\

Drop any data where the AUC values are missing.

In the final merged data, make the `"watched"` variable coded as a factor with levels:

-   **1** = `"seen"`, **2** = `"not seen"`, **3** = `"not sure"`.

-   Write the cleaned file to `data_cleaned`

### **Read in the participant data and rename columns for clarity**

```{r}
ppt <- read_csv("/Users/mayong/Desktop/participants_info_full_headers.csv") %>% 
  rename(
    id        = `participant ID`,
    age_group = `Age group`,
    precision = "Precision")

```

### 


Each question about watching each video is a column, so use pivot_longer().

Use separate() to extract just the video name into its own column.

```{r}
ppt_long <- ppt %>%
  pivot_longer(
    cols        = starts_with("Seen"),
    names_to    = "stim",
    values_to   = "watched"
  ) %>%
  separate(stim, into = c(NA, "stim"))
```

### Code `stim` and `watched` as factors

```{r}
ppt_long <- ppt_long %>%
  mutate(
    stim = factor(stim, levels = stim_labels, labels = stim_labels),
    watched = factor(watched, levels = 1:3, labels = c("Yes", "No", "Not Sure"))
  )
```

Join the participant data to the AUC data (by `id` and `stim`, since each participant has observations for each stim).

```{r}
ds <- left_join(auc, ppt_long, by = c("id", "stim"))

ds <- ds %>% drop_na(AUC_sal:AUC_dist)

```

### Write the data to file

```{r}
ds %>% write_csv("/Users/mayong/Desktop/cleaned.csv")
```

## **Step 3: Exploratory Data Analysis**

**3A. Precision: Is the Precision Acceptable (`< 2.5`) for Each Participant?**

-   Visualize the distribution of `precision` to see if there are values above 2.5.

-   Create a summary to figure out which participants should be excluded if `> 2.5` means the data is unusable.

-   Use a summary table and plots to investigate whether data is equally precise for participants of different ages.

    **Visualize the distribution of precision**

```{r}
ds %>%
  ggplot(aes(x = precision)) +
  geom_histogram() +
  geom_vline(xintercept = 2.5)

```

    `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.

### Create a summary to figure out which participants would we need to exclude if \> 2.5 meant the data are unuseable?

```{r}
ds %>%
  group_by(id, age_group) %>%
  summarize(precision = mean(precision, na.rm = TRUE)) %>%
  filter(precision > 2.5)

```

```{r}
ds %>% filter(precision > 2.5)

```

    `summarise()` has grouped output by 'id'. You can override using the `.groups`
    argument.

### Use a summary table and plots to investigate whether data equally precise for participants of different ages

```{r}
ds %>%
  group_by(age_group) %>%
  summarize(across(precision, list(M = mean, MIN = min, MAX = max)))

```

### Visualize precision differences by age group

```{r}
ds %>%
  ggplot(aes(x = age_group, y = precision)) +
  geom_boxplot() +
  geom_hline(yintercept = 2.5)

```

```{r}
ds %>%
  ggplot(aes(x = age, y = precision)) +
  geom_point() +
  geom_hline(yintercept = 2.5)

```

### **3B. Age: Are There Any Errors in Age?**

-   Convert `age` to years so that it can be more easily compared to `age_group`.

-   Visualize `age` in years by `age_group` to see whether participants are the correct age for their group.

-   Create a summary table of `age` in years by `age_group` to check whether all participants' ages are correct.

    **Convert `age` to years**

```{r}
ds <- ds %>% mutate(age_years = age / 365.25)

```

    `summarise()` has grouped output by 'id'. You can override using the `.groups`
    argument.

### Visualize age in years by `age_group`

```{r}
ds %>%
  group_by(id, age_group) %>%
  summarize(age_years = mean(age_years)) %>%
  ggplot(aes(y = age_group, x = age_years)) +
  geom_boxplot()

```

### Another option would be to facet by age group and to let the scales be \"free\" to get a better look

```{r}
ds %>%
  group_by(id, age_group) %>%
  summarize(age_years = mean(age_years)) %>%
  ggplot(aes(y = age_years)) +
  geom_boxplot() +
  facet_wrap("age_group", scales = "free")

```

    `summarise()` has grouped output by 'id'. You can override using the `.groups`
    argument.

### Make a summary table of age in years by age group to check whether all participants\' ages are correct

```{r}
ds %>%
  group_by(age_group) %>%
  summarize(
    min_age = min(age_years),
    max_age = max(age_years)
  )

```
